<?php
/**
 * Chill
 * A Basic PHP CouchDB REST Client
 * Copyright (c) 2009, Mark Obcena
 * Released Under The MIT License
 * See included README for more information.
 */

require_once 'Chill/ChillBase.php';
require_once 'Chill/Curl.php';
require_once 'Chill/Reader.php';
require_once 'Chill/Database.php';
require_once 'Chill/Document.php';
require_once 'Chill/Documents.php';

/**
 * @class Chill
 * The main class Chill acts as a wrapper for a CouchDB Server connection.
 *
 * @brief Wrapper for a CouchDB server.
 * @author Mark Obcena
 */

class Chill extends Chill_Base
{
	/**
	 * For use in User-Agent string.
	 */

	private $version = "0.1";

	/**
	 * (array) store for Chill::getUuid()
	 */

	public static $UUIDS;

	/**
	 * (ChillReader) stores main Chill_Reader instance.
	 */

	static $Reader;
  public static $H;
	/**
	 * @param $host - (string) The CouchDB host server.
	 */

	public function __construct($host)
	{
		parent::__construct();
		$this->host = rtrim($host, '/') . '/';
    self::$H = $this->host;
		$this->_handshake();
	}

	/**
	 * Check whether the host is indeed a CouchDB server.
	 */

	private function _handshake()
	{
		$success = $this->get("");
		if (!$success->body->couchdb) throw new Chill_ConnectionException("Cannot connect to Database at $this->host");
	}

	/**
	 * List all available databases in a CouchDB server.
	 *
	 * @return an array of names of available database.
	 */
  public function getHost() {
    return Chill::$H;
  }
	public function listDbs()
	{
		$response = $this->get("_all_dbs");
		return $response->body;
	}

	/**
	 * Opens a CouchDB database and returns a Chill_Database instance.
	 *
	 * @param $name (string) The name of the database to open.
	 * @return a Chill_Database instance if successful, or false if otherwise.
	 */

	public function openDb($name)
	{
		try {
			$response = new Chill_Database($this, $name);
			return $response;
		} catch(Exception $e) {
			return false;
		}
	}

	/**
	 * Creates a new CouchDB database on the server.
	 *
	 * @param $name (string) The name of the database to create.
	 * @return a Chill_Database instance if successful, or false if otherwise.
	 */

	public function createDb($name)
	{
		$response = $this->put(urlencode($name));
		if (isset($response->body->ok)) {
			return $this->openDb($name);
		}
		return false;
	}

	/**
	 * Deletes a CouchDB database on the server.
	 *
	 * @param $name (string) The name of the database to delete.
	 * @return true if successful, or false if otherwise.
	 */

	public function deleteDb($name)
	{
		$response = $this->delete(urlencode($name));
		if (isset($response->body->ok)) {
			return true;
		}
		return false;
	}

	/**
	 * Returns a UUID generated by the server.
	 *
	 * @return a UUID string.
	 */

	static function getUuid()
	{
		if (empty(Chill::$UUIDS)) {
			$response = Chill::$Reader->get(Chill::$H,"_uuids", array(),array("count" => "20"));
			Chill::$UUIDS = $response->body->uuids;
		}
		return array_shift(Chill::$UUIDS);
	}

}
